{"version":3,"sources":["icons/cam.svg","icons/cam_off.svg","components/Home.js","components/Camera.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","Flex","StyledDiv","props","isLabel","Home","useState","data","setData","useEffect","mounted","fetchData","axios","get","then","res","setTimeout","catch","console","log","map","item","i","key","label","value","Stylediframe","iframe","Camera","src","frameborder","allowfullscreen","CameraDiv","showCam","camOffIcon","camIcon","App","setShowCam","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,yjBCI3C,IAwCMC,EAAUC,IAAOC,IAAV,KAGPC,EAAOF,IAAOC,IAAV,KAIJE,EAAYH,IAAOC,IAAV,KAIC,SAAAG,GAAK,OAAIA,EAAMC,QAAU,UAAY,aACxC,SAAAD,GAAK,OAAIA,EAAMC,QAAU,UAAY,YAGnCC,EAvDF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAwBjB,OArBAC,qBAAU,WACR,IAAIC,GAAU,EAiBd,OAfkB,SAAZC,IACJC,IAAMC,IAAI,uBACPC,MAAK,SAAAC,GACAL,IACFF,EAAQO,EAAIR,MACZS,YAAW,WACTL,MACC,SAGNM,MAAMC,QAAQC,KAGnBR,GAEO,kBAAMD,GAAU,KACtB,IAGD,kBAACZ,EAAD,KACIS,EAAKa,KAAK,SAACC,EAAMC,GAAP,OACV,kBAACrB,EAAD,CAAMsB,IAAKD,GACT,kBAACpB,EAAD,CAAWE,SAAS,GACjBiB,EAAKG,OAER,kBAACtB,EAAD,KACGmB,EAAKI,a,iQCjClB,IAMMxB,EAAOF,IAAOC,IAAV,KAKJ0B,EAAe3B,IAAO4B,OAAV,KAMHC,EAjBA,kBACb,kBAAC,EAAD,KAEE,kBAACF,EAAD,CAAcG,IAAI,wBAAwBC,YAAY,IAAIC,iBAAe,M,uYCC7E,IAiBMC,EAAYjC,IAAOC,IAAV,KAQK,SAAAG,GAAK,OAAIA,EAAM8B,QAAUC,IAAaC,OAKtC,SAAAhC,GAAK,OAAIA,EAAM8B,QAAU,MAAQ,UAGtCG,EAjCH,WAAO,IAAD,EACgB9B,oBAAS,GADzB,mBACR2B,EADQ,KACCI,EADD,KAGhB,OADAnB,QAAQC,IAAIc,GAEV,oCACE,kBAACD,EAAD,CAAWM,QAAS,kBAAID,GAAYJ,IAAUA,QAASA,IACtDA,EAEG,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCLUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.93da75c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cam.7ced313f.svg\";","module.exports = __webpack_public_path__ + \"static/media/cam_off.97f6b482.svg\";","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst Home = () => {\n  const [data, setData] = useState([])\n  \n  useEffect(() => {  \n    let mounted = true;\n\n    const fetchData = () => {\n      axios.get('/api/shakerdata.txt')\n        .then(res => {\n          if (mounted) {\n            setData(res.data)\n            setTimeout(() => {\n              fetchData()\n            }, 1000); \n          }\n        })\n        .catch(console.log)   \n    }\n\n    fetchData()\n\n    return () => mounted = false\n  }, [])\n\n  return (\n    <Wrapper>\n      { data.map( (item, i) => (\n        <Flex key={i}>\n          <StyledDiv isLabel={true}>\n            {item.label}\n          </StyledDiv>\n          <StyledDiv>\n            {item.value}\n          </StyledDiv>\n        </Flex>\n      ))}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  padding: 1rem 0.5rem;\n`\nconst Flex = styled.div`\n  padding: 0.5rem 1rem;\n  font-size: 2rem;\n`\nconst StyledDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ${props => props.isLabel ? \"#d9d9d9\" : \"#92d150\"};\n  padding: ${props => props.isLabel ? \"0.25rem\" : \"0.5rem\"};\n`\n\nexport default Home","import React from 'react';\nimport styled from 'styled-components';\n\nconst Camera = () => (\n  <Flex>\n    {/* <embed src=\"http://10.0.0.209:8081\" height='480' width=\"640\"/> */}\n    <Stylediframe src=\"http://127.0.0.1:8081\" frameborder=\"0\" allowfullscreen></Stylediframe>\n  </Flex>\n)\nconst Flex = styled.div`\n  // display: flex;\n  // width: 1vw;\n  // height: 100%;\n`\nconst Stylediframe = styled.iframe`\n  position: absolute;\n  width:100vw;\n  height:100vh;\n`\n\nexport default Camera;","import React, {useState} from 'react';\nimport Home from './components/Home';\nimport Camera from './components/Camera';\nimport camIcon from './icons/cam.svg';\nimport camOffIcon from './icons/cam_off.svg';\nimport styled from 'styled-components';\n\nconst App = () => {\n  const [ showCam, setShowCam ] = useState(false)\n  console.log(showCam)\n  return(\n    <>\n      <CameraDiv onClick={()=>setShowCam(!showCam)} showCam={showCam}/>\n      {showCam \n        ? \n          <Camera />\n        :\n          <Home />\n      }\n    </>  \n  )\n}\n\n\nconst CameraDiv = styled.div`\n  position: fixed;\n  // top: 1.15rem;\n  // right: 2rem;\n  top: 0rem;\n  right: 0.25rem;\n  height: 60px;\n  width: 60px;\n  background: url(${props => props.showCam ? camOffIcon : camIcon});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  z-index: 1;\n  filter: opacity(${props => props.showCam ? \"50%\" : \"100%\"});\n  \n`\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}